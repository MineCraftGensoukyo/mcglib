buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = "https://repo.spongepowered.org/maven" }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.+'
        classpath "org.spongepowered:mixingradle:0.7.+"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_plugin_version"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.+'
    id 'java'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = modVersion
group = "moe.gensoukyo.lib" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = modFileName

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xpolymorphic-signature", "-Xjvm-default=enable"]
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile) {
    options.encoding = "utf8"
}

tasks.withType(Javadoc) {
    options {
        encoding 'UTF-8'
        charSet 'UTF-8'
        links 'http://docs.oracle.com/javase/8/docs/api'
    }
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'fml.coreMods.load', 'moe.gensoukyo.lib.internal.core.MixinBootstrapPlugin'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'fml.coreMods.load', 'moe.gensoukyo.lib.internal.core.MixinBootstrapPlugin'
        }
    }
}

mixin {
    add sourceSets.main, "mixins.${modid}.refmap.json"
    //config "mixins.${modid}.json"     // we will not do this so that the mixin will not prepare this config at first, so there will no ClassNotFoundException

    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true
}

repositories {
    flatDir { dir 'lib' }
    mavenCentral()
    maven { url = "https://repo.spongepowered.org/maven" }
    maven { url = "https://maven.shadowfacts.net/" }
    maven { url = "https://hub.spigotmc.org/nexus/content/repositories/public/" }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    // run deobf version of cnpc with deobf forge environment will lead to crash, so here i change it to
    // compileOnly and add origin jar to the ./run/mods. This should also happen to you.
    testImplementation 'noppes.npcs:CustomNPCs_1.12.2:(05Jul20)-deobf'
    compileOnly 'noppes.npcs:CustomNPCs_1.12.2:(05Jul20)-deobf'
    implementation '_:AttributePlus:2.2.9'

    // Mixin
    implementation("org.spongepowered:mixin:${mixinVersion}") {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
    annotationProcessor "org.spongepowered:mixin:${mixinVersion}:processor"

    compileOnly group: "net.shadowfacts", name: "Forgelin", version: "1.8.3"
    // 插件
    compile "org.bukkit:bukkit:1.12.2-R0.1-SNAPSHOT"
    compileOnly 'org.spongepowered:spongeapi:7.3.0'
    // compile "org.serverct.ersha.jd:AttributePlus:2.2.9.2"

    // JUnit
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')

    implementation group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlin_version
    implementation group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk7", version: kotlin_version
    implementation group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: kotlin_version
    implementation group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlin_version
    compile group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: coroutines_version
    compile group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: coroutines_version
    testImplementation "org.jetbrains.kotlin:kotlin-script-runtime:1.3.40"
}

/*
processResources {
    def mcversion = "1.12.2"
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", mcversion

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        expand 'version': project.version, 'mcversion': mcversion
    }
}
*/

test {
    useJUnitPlatform()
}

jar {
    // non-shadow jar
    archiveClassifier.set "nolibs"
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "Minecraft Gensokyo",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Minecraft Gensokyo",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLCorePlugin": "moe.gensoukyo.lib.internal.core.MixinBootstrapPlugin",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "FMLCorePluginContainsFMLMod": true,
                "ForceLoadAsMod": true
        ])
    }
}

shadowJar {
    archiveClassifier.set null
    dependencies {
        include dependency("org.spongepowered:mixin:${mixinVersion}")
    }
    exclude('org/spongepowered/asm/launch/MixinLaunchPlugin.class')
    exclude('org/spongepowered/asm/launch/MixinTransformationService.class')
    exclude('org/spongepowered/asm/launch/platform/container/ContainerHandleModLauncherEx.class')
    exclude('org/spongepowered/asm/launch/platform/container/ContainerHandleModLauncherEx$SecureJarResource.class')
    exclude('META-INF/INDEX.LIST')
    exclude('META-INF/*.SF')
    exclude('META-INF/*.DSA')
    exclude('META-INF/*.RSA')
}
tasks.build.dependsOn shadowJar

artifacts {
    archives shadowJar
}

shadowJar.finalizedBy('reobfJar')

reobf {
    shadowJar {}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
